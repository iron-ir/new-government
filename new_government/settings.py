"""
Django settings for new_government project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
from django.contrib import admin

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dt&21x4ywk49%)p&rq@^y+@@w95&vox8(%!8p0r51%0k!1ye*t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'api.ref.mortza.ir',
]

INTERNAL_IPS = [
    '127.0.0.1',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'debug_toolbar',
    'rest_framework',

    'users.apps.UsersConfig',
    'base_information_settings.apps.BaseInformationSettingsConfig',
    'elections.apps.ElectionsConfig',
    'polling.apps.PollingConfig',
    'messaging.apps.MessagingConfig',
    'ticketing.apps.TicketingConfig',
    'notifying.apps.NotifyingConfig',
    'talking.apps.TalkingConfig',

    # 'users.static',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',

    'debug_toolbar.middleware.DebugToolbarMiddleware',

    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'new_government.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'new_government.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'fa-ir'

LANGUAGES = [
    ('en', 'English'),
    ('fa', 'Persian')
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

LOGIN_URL = '/login'

LOGIN_REDIRECT_URL = '/admin/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

LAST_ELECTION_PERIOD = '1400:03:28'

# ADMIN_ORDERING = [
#     (
#         'users', [
#             'User',
#             'EducationHistory',
#             'WorkExpiration',
#             'Effect',
#             'Standpoint',
#             'UserRelation',
#             'Privacy',
#             'VCode',
#         ],
#     ),
#     (
#         'elections', [
#             'Election',
#             'RegisterCandidatePerElection',
#             'Candidate',
#             'CandidateGroup',
#         ],
#     ),
#     (
#         'auth', [
#             'Group',
#         ],
#     ),
#     (
#         'base_information_settings',
#         [
#             'BaseInformationHeader',
#             'BaseInformation',
#             'Zone',
#         ],
#     ),
# ]
#
#
# # Creating a sort function
# def get_app_list(self, request):
#     app_dict = self._build_app_dict(request)
#     for app_name, object_list in ADMIN_ORDERING:
#         app = app_dict[app_name]
#         app['models'].sort(key=lambda x: object_list.index(x['object_name']))
#         yield app
#
#
# admin.AdminSite.get_app_list = get_app_list
